authcom.gh

import React, { createContext, useContext, useState, useEffect } from "react";
import { adminCheckout, adminLogin } from "../endpoints";

const AuthContext = createContext();

export const AuthProvider = ({ children }) => {
  // Combine state into a single object
  const [authState, setAuthState] = useState({
    isAuthenticated: false,
    loading: true,
  });

  const fetchUserData = async () => {
    try {
      const response = await fetch(`${BASE_URL}/api/users/profile`, {
        headers: getAuthHeader()
      });
  
      if (response.ok) {
        const data = await response.json();
        return data.user;
      }
      throw new Error('Failed to fetch user data');
    } catch (error) {
      console.error('Error fetching user data:', error);
      logout();
      return null;
    }
  };

  useEffect(() => {
    const checkAuth = async () => {
      const token = localStorage.getItem("adminToken");

      if (!token) {
        setAuthState({ isAuthenticated: false, loading: false });
        return;
      }

      try {
        const response = await fetch(adminCheckout, {
          headers: {
            Authorization: `Bearer ${token}`,
            "Content-Type": "application/json",
          },
        });

        setAuthState({
          isAuthenticated: response.ok,
          loading: false,
        });

        if (!response.ok) {
          localStorage.removeItem("adminToken");
        }
      } catch (error) {
        console.error("Auth check failed:", error);
        localStorage.removeItem("adminToken");
        setAuthState({ isAuthenticated: false, loading: false });
      }
    };

    checkAuth();

    const user = localStorage.getItem('user');
  if (user) {
    setAuthState({
      isAuthenticated: true,
      user: JSON.parse(user),
      loading: false
    });
  } else {
    fetchUserData().then(user => {
      if (user) {
        localStorage.setItem('user', JSON.stringify(user));
        setAuthState({
          isAuthenticated: true,
          user,
          loading: false
        });
      } else {
        setAuthState({
          isAuthenticated: false,
          loading: false
        });
      }
    });
  }
  }, []);

  const login = async (username, password) => {
    try {
      const response = await fetch(adminLogin, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ username, password }),
      });

      if (response.ok) {
        const data = await response.json();
        localStorage.setItem("adminToken", data.adminToken); // Match server response key
        setAuthState({ isAuthenticated: true, loading: false });
        return true;
      }
      return false;
    } catch (error) {
      console.error("Login error:", error);
      return false;
    }
  };

  const logout = () => {
    localStorage.removeItem("adminToken");
    setAuthState({ isAuthenticated: false, loading: false });
  };

  return (
    <AuthContext.Provider
      value={{
        isAuthenticated: authState.isAuthenticated,
        loading: authState.loading,
        login,
        logout,
      }}
    >
      {children}
    </AuthContext.Provider>
  );
};

export const useAuth = () => useContext(AuthContext);
